Description: Use the CliRunner to invoke the executable during testing.
 .
 The executable program is installed with a custom filename, so we can't invoke
 it with a hard-coded name during tests.
 .
 Instead, conistently use the CliRunner feature from Click, to invoke the
 executable.
Bug-GitHub: https://github.com/twisted/towncrier/issues/481
Author: Ben Finney <bignose@debian.org>
Last-Update: 2023-02-15

diff --git old/src/towncrier/test/test_check.py new/src/towncrier/test/test_check.py
--- old/src/towncrier/test/test_check.py
+++ new/src/towncrier/test/test_check.py
@@ -3,16 +3,16 @@
 
 import os
 import os.path
-import sys
 import warnings
 
 from pathlib import Path
-from subprocess import PIPE, Popen, call
+from subprocess import call
 
 from click.testing import CliRunner
 from twisted.trial.unittest import TestCase
 
 from towncrier import check
+from towncrier.build import _main as towncrier_build
 from towncrier.check import _main as towncrier_check
 
 from .helpers import setup_simple_project, with_isolated_runner, write
@@ -182,15 +182,12 @@ class TestChecker(TestCase):
             call(["git", "add", fragment_path])
             call(["git", "commit", "-m", "add a newsfragment"])
 
-            proc = Popen(
-                [sys.executable, "-m", "towncrier.check", "--compare-with", "master"],
-                stdout=PIPE,
-                stderr=PIPE,
-            )
-            stdout, stderr = proc.communicate()
+            runner = CliRunner(mix_stderr=False)
+            result = runner.invoke(
+                towncrier_check, ["--compare-with", "master"])
 
-        self.assertEqual(0, proc.returncode)
-        self.assertEqual(0, len(stderr))
+        self.assertEqual(0, result.exit_code)
+        self.assertEqual(0, len(result.stderr))
 
     def test_first_release(self):
         """
@@ -207,7 +204,7 @@ class TestChecker(TestCase):
             # Before any release, the NEWS file might no exist.
             self.assertNotIn("NEWS.rst", os.listdir("."))
 
-            call(["towncrier", "build", "--yes", "--version", "1.0"])
+            runner.invoke(towncrier_build, ["--yes", "--version", "1.0"])
             commit("Prepare a release")
             # When missing,
             # the news file is automatically created with a new release.
@@ -235,7 +232,7 @@ class TestChecker(TestCase):
 
             # Do a first release without any checks.
             # And merge the release branch back into the main branch.
-            call(["towncrier", "build", "--yes", "--version", "1.0"])
+            runner.invoke(towncrier_build, ["--yes", "--version", "1.0"])
             commit("First release")
             # The news file is now created.
             self.assertIn("NEWS.rst", os.listdir("."))
@@ -260,7 +257,7 @@ class TestChecker(TestCase):
 
             # We now have the new release branch.
             call(["git", "checkout", "-b", "next-release"])
-            call(["towncrier", "build", "--yes", "--version", "2.0"])
+            runner.invoke(towncrier_build, ["--yes", "--version", "2.0"])
             commit("Second release")
 
             # Act
diff --git old/src/towncrier/test/test_project.py new/src/towncrier/test/test_project.py
--- old/src/towncrier/test/test_project.py
+++ new/src/towncrier/test/test_project.py
@@ -4,12 +4,13 @@
 import os
 import sys
 
-from subprocess import check_output
 from unittest import skipIf
 
+from click.testing import CliRunner
 from twisted.trial.unittest import TestCase
 
 from .._project import get_project_name, get_version
+from .._shell import cli as towncrier_cli
 from .helpers import write
 
 
@@ -19,6 +20,9 @@ except ImportError:
     metadata_version = None
 
 
+towncrier_cli.name = "towncrier"
+
+
 class VersionFetchingTests(TestCase):
     def test_str(self):
         """
@@ -180,6 +184,7 @@ class InvocationTests(TestCase):
         """
         `python -m towncrier` invokes the main entrypoint.
         """
+        runner = CliRunner()
         temp = self.mktemp()
         new_dir = os.path.join(temp, "dashm")
         os.makedirs(new_dir)
@@ -189,10 +194,10 @@ class InvocationTests(TestCase):
             with open("pyproject.toml", "w") as f:
                 f.write("[tool.towncrier]\n" 'directory = "news"\n')
             os.makedirs("news")
-            out = check_output([sys.executable, "-m", "towncrier", "--help"])
-            out_text = out.decode(sys.stdout.encoding)
-            self.assertIn("[OPTIONS] COMMAND [ARGS]...", out_text)
-            self.assertRegex(out, rb".*--help\s+Show this message and exit.")
+            result = runner.invoke(towncrier_cli, ["--help"])
+            self.assertIn("[OPTIONS] COMMAND [ARGS]...", result.stdout)
+            self.assertRegex(
+                result.stdout, r".*--help\s+Show this message and exit.")
         finally:
             os.chdir(orig_dir)
 
@@ -200,9 +205,9 @@ class InvocationTests(TestCase):
         """
         `--version` command line option is available to show the current production version.
         """
-        out = check_output(["towncrier", "--version"])
-        out_text = out.decode(sys.stdout.encoding)
+        runner = CliRunner()
+        result = runner.invoke(towncrier_cli, ["--version"])
         expected_program_version = metadata_version("towncrier")
         expected_result = "towncrier, version {}".format(
             expected_program_version)
-        self.assertTrue(out_text.startswith(expected_result))
+        self.assertTrue(result.output.startswith(expected_result))

Local variables:
coding: utf-8
mode: diff
time-stamp-format: "%:y-%02m-%02d"
time-stamp-start: "^Last-Update:[ 	]+"
time-stamp-end: "$"
time-stamp-line-limit: 20
End:
vim: fileencoding=utf-8 filetype=diff :
